version: '3.4'

services:
  transit_measurement_video_service:
    image: transit_measurement_video_service
    container_name: transit_measurement_video_service
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AWS_REGION=${AWS_REGION}
      - AWS_KEY_ID=${AWS_KEY_ID}
      - AWS_SECRET=${AWS_SECRET}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - MODEL_NAME=${MODEL_NAME}
      - AUTO_RELOAD=${AUTO_RELOAD}
      - MAX_FPS=${MAX_FPS}
      - MAX_BASE_DIMENSION=${MAX_BASE_DIMENSION}
      - ALLOWED_CLASS_ID=${ALLOWED_CLASS_ID}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD}
      - THREAD_ORCHESTRATOR_SLEEP_TIME=${THREAD_ORCHESTRATOR_SLEEP_TIME}
    build:
      context: .
      dockerfile: ./Dockerfile.video
    volumes:
      - ./shared:/app/src/shared
      - ./video-service/src:/app/src
    ports:
      - "81:80"
    depends_on:
      - transit_measurement_service_db
      - transit_measurement_service_queue
  transit_measurement_api_service:
    image: transit_measurement_api_service
    container_name: transit_measurement_api_service
    environment:
      - LOG_LEVEL=${LOG_LEVEL}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - REDIS_LOG_LEVEL=${REDIS_LOG_LEVEL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - AWS_REGION=${AWS_REGION}
      - AWS_KEY_ID=${AWS_KEY_ID}
      - AWS_SECRET=${AWS_SECRET}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - AUTO_RELOAD=${AUTO_RELOAD}
      - SECRET_APP_KEY=${SECRET_APP_KEY}
      - TOKEN_EXPIRATION=${TOKEN_EXPIRATION}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
    build:
      context: .
      dockerfile: ./Dockerfile.api
    volumes:
      - ./shared:/app/src/shared
      - ./api-service/src:/app/src
    ports:
      - "80:80"
    depends_on:
      - transit_measurement_video_service
  transit_measurement_service_db:
    image: postgres:14.2-alpine
    container_name: transit_measurement_service_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '3305:5432'
    expose:
      - '3305'
    volumes:
      - transit_measurement_service_db:/var/lib/postgresql/data
  transit_measurement_service_queue:
    image: redis:7.0.12-alpine
    container_name: transit_measurement_service_queue
    restart: always
    environment:
      REDIS_LOG_LEVEL: ${REDIS_LOG_LEVEL}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: /bin/sh -c "redis-server --loglevel $$REDIS_LOG_LEVEL --requirepass $$REDIS_PASSWORD"
    ports:
      - '6379:6379'
    expose:
      - '6379'
    volumes:
      - transit_measurement_service_queue:/data
volumes:
  transit_measurement_service_db:
  transit_measurement_service_queue: